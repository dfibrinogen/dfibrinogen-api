// Code generated by mockery v1.0.0. DO NOT EDIT.
package repository

import mock "github.com/stretchr/testify/mock"
import model "github.com/dfibrinogen/dfibrinogen-api/srv-users/model"

// MockIUserRepository is an auto generated mock type for the IUserRepository type
type MockIUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: data
func (m *MockIUserRepository) CreateUser(data model.User) (model.User, error) {
	ret := m.Called(data)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.User) model.User); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (m *MockIUserRepository) DeleteUser(id string) error {
	ret := m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchUserAll provides a mock function with given fields:
func (m *MockIUserRepository) FetchUserAll() ([]model.User, error) {
	ret := m.Called()

	var r0 []model.User
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByID provides a mock function with given fields: id
func (m *MockIUserRepository) FetchUserByID(id string) (model.User, error) {
	ret := m.Called(id)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: data
func (m *MockIUserRepository) UpdateUser(data model.User) (model.User, error) {
	ret := m.Called(data)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.User) model.User); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
